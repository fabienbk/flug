field(type, name) ::= <<
private <type> <name>;<\n>
>>

normalSetter(class, currentBuilderClass, capitalizedField,valueType, propertyName) ::= <<
public <currentBuilderClass> <propertyName>(<valueType> <propertyName>) {
	this.<propertyName> = <propertyName>;
	return this;
}
<\n>
>>

builderSetter(class, currentBuilderClass, propertyName, parentBuilder) ::= <<
public <class>Builder\< <currentBuilderClass> > <propertyName>() {
	this.<propertyName>Builder = new <class>Builder\< <currentBuilderClass> >(this);
	return this.<propertyName>Builder;
}
<\n>
>>

collectionSetter(class, currentBuilderClass, propertyName, parentBuilder, collectionClass, concreteCollectionClass) ::= <<
public <currentBuilderClass> <propertyName>() {
	if (this.<propertyName>Builder == null) {
		this.<propertyName>Builder = new <concreteCollectionClass>();
	} 
	<currentBuilderClass> val = new <currentBuilderClass>(this);
	this.<propertyName>Builder.add(val);
	return val;
}
<\n>
>>
topLevelBuilderClass(package, qualifiedClass, class, fields, setterMethods, instanceInit, innerClass) ::= <<

package <package>;

public class <class>Builder {
	 
	<fields>
	
	public <class>Builder() {
	}
	
	<setterMethods>
			
	public <qualifiedClass> build() {
		<qualifiedClass> instance = new <qualifiedClass>();
		<instanceInit>		
		return instance;
	}	
	
	<innerClass>
}
>>


builderClass(package, qualifiedClass, class, subBuildersFields, fields, setterMethods, instanceInit, parentBuilder) ::= <<

public static class <class>Builder\<P> {
	 
	<subBuildersFields>
	<fields>
	P _parent;
	
	public <class>Builder(P _parent) {
		this._parent = _parent;
	}
	
	<setterMethods>
	
	public P end() {
		return _parent;
	}
			
	public <qualifiedClass> build() {
		<qualifiedClass> instance = new <qualifiedClass>();
		<instanceInit>		
		return instance;
	}	
}
>>

instanceInit(setter, value) ::= <<
instance.<setter>(<value>);	

>>

instanceInitList(setter, propName) ::= <<
if (<propName> != null) { <propName>.stream().forEach(p -> instance.<setter>().add(p.build())); }

>>

